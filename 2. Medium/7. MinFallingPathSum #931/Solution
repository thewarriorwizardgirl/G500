class Solution {
public:
    int minFallingPathSum(vector<vector<int>>& matrix) {
        int n = matrix.size();
        int minPathSum= INT_MAX;
        // first row is same as matrix
        vector<vector<int>> dp(n, vector<int>(n));
        for(int j=0; j<n; j++){
            dp[0][j]=matrix[0][j];
        }

        // filling the rest of the matrix
        for(int i=1 ; i<n; i++){
            dp[i][0]= matrix[i][0]+ min(dp[i-1][0], dp[i-1][1]);
            for(int j=1; j<n-1; j++){
                dp[i][j]= matrix[i][j]+min(dp[i-1][j-1], min(dp[i-1][j], dp[i-1][j+1]));
            }
            dp[i][n-1]= matrix[i][n-1]+min(dp[i-1][n-2], dp[i-1][n-1]);
        }

        for(int j=0; j<n; j++){
            if(dp[n-1][j]<minPathSum){
                minPathSum=dp[n-1][j];
            }
        }
        return minPathSum;
    }
};