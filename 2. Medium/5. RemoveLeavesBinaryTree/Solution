**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

class Solution {
    TreeNode* findLeavesHelper(TreeNode* root, vector<int>& temp){
        if (root==nullptr){
            return nullptr;
        }
        if(root->left==nullptr && root->right==nullptr){
            temp.push_back(root->val);
            return nullptr;
        }
        TreeNode* l= findLeavesHelper(root->left, temp);
        TreeNode* r= findLeavesHelper(root->right, temp);
        root->left = l;
        root->right = r;
        return root;
    }
public:
    vector<vector<int>> findLeaves(TreeNode* root) {
        vector<vector<int>> output;
               
        while (root!=nullptr){
            vector<int> temp ={};
            root = findLeavesHelper(root, temp);
           // cout<<leaves<<" ";
            output.push_back(temp);
        }

    return output;
    }
};